name: CI Pipeline

on:
  push:
    branches: ["master"]

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
    # v4 is current
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: "pip"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install flake8 pytest allure-pytest

    - name: Show Chrome & Chromedriver
      run: |
        google-chrome --version || true
        chromedriver --version || true

    - name: Start docker services (webshop)
      uses: hoverkraft-tech/compose-action@v2.0.1
      with:
        compose-file: "./sprint-1/compose.yaml"

    - name: Wait for backend to be ready
      run: |
        echo "Waiting for backend (http://localhost:8080/api/products)..."
        for i in {1..60}; do
          if curl -fsS http://localhost:8080/api/products >/dev/null; then
            echo "✅ Backend is UP"
            break
          fi
          echo "Backend not ready yet..."
          sleep 2
        done
        curl -fsS http://localhost:8080/api/products >/dev/null || (echo "❌ Backend never became ready"; docker logs backend || true; exit 1)


    - name: Wait for frontend to be ready
      run: |
        echo "Waiting for frontend (http://localhost:4200/)..."
        for i in {1..60}; do
          if curl -fsS http://localhost:4200/ >/dev/null; then
            echo "✅ Frontend is UP"
            break
          fi
          echo "UI not ready yet..."
          sleep 2
        done
        # hard fail with logs if still down
        curl -fsS http://localhost:4200/ >/dev/null || (echo "❌ Frontend never became ready"; docker logs frontend || true; exit 1)

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run Selenium tests & collect Allure results
      env:
        CI: "true"  # let your driver pick headless flags
      run: |
        pytest ./sprint-1 --alluredir=./reports/allure-results

    - name: Generate Allure report history
      if: always()
      uses: simple-elf/allure-report-action@master
      with:
        allure_results: ./reports/allure-results
        allure_history: ./reports/allure-history
        keep_reports: 50

    - name: Deploy Allure report to GitHub Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: ./reports/allure-history
