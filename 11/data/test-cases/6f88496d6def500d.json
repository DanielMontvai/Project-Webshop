{"uid":"6f88496d6def500d","name":"test_login","fullName":"sprint-1.Automata_tesztek.test_pricecheck.TestWebShop#test_login","historyId":"34abd8a4f0ca7d98a81541b5c84b439a","time":{"start":1761239666999,"stop":1761239728767,"duration":61768},"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <mat-icon role=\"img\" class=\"mat-icon notranslate material-icons mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">...</mat-icon> is not clickable at point (57, 295). Other element would receive the click: <button mat-button=\"\" class=\"mat-focus-indicator mat-button mat-button-base ng-star-inserted\" tabindex=\"0\" style=\"\">...</button>\n  (Session info: chrome=140.0.7339.207); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n#0 0x56034eec1fba <unknown>\n#1 0x56034e9466d0 <unknown>\n#2 0x56034e99f1bc <unknown>\n#3 0x56034e99d01b <unknown>\n#4 0x56034e99a6c2 <unknown>\n#5 0x56034e999de0 <unknown>\n#6 0x56034e98c5cb <unknown>\n#7 0x56034e9bde32 <unknown>\n#8 0x56034e98bf47 <unknown>\n#9 0x56034e9bdffe <unknown>\n#10 0x56034e9e3b54 <unknown>\n#11 0x56034e9bdc03 <unknown>\n#12 0x56034e98a7a8 <unknown>\n#13 0x56034e98b421 <unknown>\n#14 0x56034ee86b28 <unknown>\n#15 0x56034ee8a87f <unknown>\n#16 0x56034ee6ec49 <unknown>\n#17 0x56034ee8b405 <unknown>\n#18 0x56034ee544ff <unknown>\n#19 0x56034eeaf258 <unknown>\n#20 0x56034eeaf432 <unknown>\n#21 0x56034eec0fa3 <unknown>\n#22 0x7fe41809caa4 <unknown>\n#23 0x7fe418129c6c <unknown>","statusTrace":"self = <WebshopMainPage.WebshopMainPage object at 0x7f85ec5ea8f0>\n\n    def reglogin(self):\n        wait = WebDriverWait(self.browser, 60)\n        try:\n>           login = wait.until(EC.element_to_be_clickable((By.ID, 'regLogin')))\n\nsprint-1/Automata_tesztek/WebshopMainPage.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3fc8cf2178787f7d472d8cc7aeb7d33e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f85ec59a8c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_pricecheck.TestWebShop object at 0x7f85ec6f4310>\n\n    def test_login(self):\n>       self.page.login_process('forlogin', 'Forlogin@1')\n\nsprint-1/Automata_tesztek/test_pricecheck.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsprint-1/Automata_tesztek/WebshopMainPage.py:103: in login_process\n    self.reglogin()\nsprint-1/Automata_tesztek/WebshopMainPage.py:80: in reglogin\n    login.click()\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f85ec5e9510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x56034eec0fa3 \\\\u003Cunknown>\\\\n#22 0x7fe41809caa4 \\\\u003Cunknown>\\\\n#23 0x7fe418129c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <mat-icon role=\"img\" class=\"mat-icon notranslate material-icons mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">...</mat-icon> is not clickable at point (57, 295). Other element would receive the click: <button mat-button=\"\" class=\"mat-focus-indicator mat-button mat-button-base ng-star-inserted\" tabindex=\"0\" style=\"\">...</button>\nE         (Session info: chrome=140.0.7339.207); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       #0 0x56034eec1fba <unknown>\nE       #1 0x56034e9466d0 <unknown>\nE       #2 0x56034e99f1bc <unknown>\nE       #3 0x56034e99d01b <unknown>\nE       #4 0x56034e99a6c2 <unknown>\nE       #5 0x56034e999de0 <unknown>\nE       #6 0x56034e98c5cb <unknown>\nE       #7 0x56034e9bde32 <unknown>\nE       #8 0x56034e98bf47 <unknown>\nE       #9 0x56034e9bdffe <unknown>\nE       #10 0x56034e9e3b54 <unknown>\nE       #11 0x56034e9bdc03 <unknown>\nE       #12 0x56034e98a7a8 <unknown>\nE       #13 0x56034e98b421 <unknown>\nE       #14 0x56034ee86b28 <unknown>\nE       #15 0x56034ee8a87f <unknown>\nE       #16 0x56034ee6ec49 <unknown>\nE       #17 0x56034ee8b405 <unknown>\nE       #18 0x56034ee544ff <unknown>\nE       #19 0x56034eeaf258 <unknown>\nE       #20 0x56034eeaf432 <unknown>\nE       #21 0x56034eec0fa3 <unknown>\nE       #22 0x7fe41809caa4 <unknown>\nE       #23 0x7fe418129c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_xunit_setup_method_fixture_TestWebShop","time":{"start":1761239666500,"stop":1761239666999,"duration":499},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <mat-icon role=\"img\" class=\"mat-icon notranslate material-icons mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">...</mat-icon> is not clickable at point (57, 295). Other element would receive the click: <button mat-button=\"\" class=\"mat-focus-indicator mat-button mat-button-base ng-star-inserted\" tabindex=\"0\" style=\"\">...</button>\n  (Session info: chrome=140.0.7339.207); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n#0 0x56034eec1fba <unknown>\n#1 0x56034e9466d0 <unknown>\n#2 0x56034e99f1bc <unknown>\n#3 0x56034e99d01b <unknown>\n#4 0x56034e99a6c2 <unknown>\n#5 0x56034e999de0 <unknown>\n#6 0x56034e98c5cb <unknown>\n#7 0x56034e9bde32 <unknown>\n#8 0x56034e98bf47 <unknown>\n#9 0x56034e9bdffe <unknown>\n#10 0x56034e9e3b54 <unknown>\n#11 0x56034e9bdc03 <unknown>\n#12 0x56034e98a7a8 <unknown>\n#13 0x56034e98b421 <unknown>\n#14 0x56034ee86b28 <unknown>\n#15 0x56034ee8a87f <unknown>\n#16 0x56034ee6ec49 <unknown>\n#17 0x56034ee8b405 <unknown>\n#18 0x56034ee544ff <unknown>\n#19 0x56034eeaf258 <unknown>\n#20 0x56034eeaf432 <unknown>\n#21 0x56034eec0fa3 <unknown>\n#22 0x7fe41809caa4 <unknown>\n#23 0x7fe418129c6c <unknown>","statusTrace":"self = <WebshopMainPage.WebshopMainPage object at 0x7f85ec5ea8f0>\n\n    def reglogin(self):\n        wait = WebDriverWait(self.browser, 60)\n        try:\n>           login = wait.until(EC.element_to_be_clickable((By.ID, 'regLogin')))\n\nsprint-1/Automata_tesztek/WebshopMainPage.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"3fc8cf2178787f7d472d8cc7aeb7d33e\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x7f85ec59a8c0>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_pricecheck.TestWebShop object at 0x7f85ec6f4310>\n\n    def test_login(self):\n>       self.page.login_process('forlogin', 'Forlogin@1')\n\nsprint-1/Automata_tesztek/test_pricecheck.py:23: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsprint-1/Automata_tesztek/WebshopMainPage.py:103: in login_process\n    self.reglogin()\nsprint-1/Automata_tesztek/WebshopMainPage.py:80: in reglogin\n    login.click()\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:119: in click\n    self._execute(Command.CLICK_ELEMENT)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webelement.py:572: in _execute\n    return self._parent.execute(command, params)\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x7f85ec5e9510>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\\\n#21 0x56034eec0fa3 \\\\u003Cunknown>\\\\n#22 0x7fe41809caa4 \\\\u003Cunknown>\\\\n#23 0x7fe418129c6c \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <mat-icon role=\"img\" class=\"mat-icon notranslate material-icons mat-ligature-font mat-icon-no-color\" aria-hidden=\"true\" data-mat-icon-type=\"font\">...</mat-icon> is not clickable at point (57, 295). Other element would receive the click: <button mat-button=\"\" class=\"mat-focus-indicator mat-button mat-button-base ng-star-inserted\" tabindex=\"0\" style=\"\">...</button>\nE         (Session info: chrome=140.0.7339.207); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       #0 0x56034eec1fba <unknown>\nE       #1 0x56034e9466d0 <unknown>\nE       #2 0x56034e99f1bc <unknown>\nE       #3 0x56034e99d01b <unknown>\nE       #4 0x56034e99a6c2 <unknown>\nE       #5 0x56034e999de0 <unknown>\nE       #6 0x56034e98c5cb <unknown>\nE       #7 0x56034e9bde32 <unknown>\nE       #8 0x56034e98bf47 <unknown>\nE       #9 0x56034e9bdffe <unknown>\nE       #10 0x56034e9e3b54 <unknown>\nE       #11 0x56034e9bdc03 <unknown>\nE       #12 0x56034e98a7a8 <unknown>\nE       #13 0x56034e98b421 <unknown>\nE       #14 0x56034ee86b28 <unknown>\nE       #15 0x56034ee8a87f <unknown>\nE       #16 0x56034ee6ec49 <unknown>\nE       #17 0x56034ee8b405 <unknown>\nE       #18 0x56034ee544ff <unknown>\nE       #19 0x56034eeaf258 <unknown>\nE       #20 0x56034eeaf432 <unknown>\nE       #21 0x56034eec0fa3 <unknown>\nE       #22 0x7fe41809caa4 <unknown>\nE       #23 0x7fe418129c6c <unknown>\n\n/opt/hostedtoolcache/Python/3.10.18/x64/lib/python3.10/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException","steps":[],"attachments":[{"uid":"7b843ad016d3933f","name":"stdout","source":"7b843ad016d3933f.txt","type":"text/plain","size":64}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_xunit_setup_method_fixture_TestWebShop::0","time":{"start":1761239728801,"stop":1761239728872,"duration":71},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"parentSuite","value":"sprint-1.Automata_tesztek"},{"name":"suite","value":"test_pricecheck"},{"name":"subSuite","value":"TestWebShop"},{"name":"host","value":"runnervmwhb2z"},{"name":"thread","value":"3380-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"sprint-1.Automata_tesztek.test_pricecheck"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"6f88496d6def500d.json","parameterValues":[]}